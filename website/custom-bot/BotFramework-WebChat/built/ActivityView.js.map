{"version":3,"file":"ActivityView.js","sourceRoot":"","sources":["../src/ActivityView.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAE/B,2CAA8C;AAC9C,uCAAsC;AACtC,iDAAgD;AAIhD,IAAM,WAAW,GAAG,UAAC,KAOpB;IACW,IAAA,+BAAW,EAAE,yCAAgB,EAAE,uEAAc,CAAW;IAChE,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,CAAC;QACzC,MAAM,CAAC,IAAI,CAAC;IAChB,MAAM,CAAC,gBAAgB,KAAK,UAAU;QAClC,oBAAC,mBAAQ,qBACL,WAAW,EAAG,WAAW,IACnB,UAAU,EAClB;;YAEF,6BAAK,SAAS,EAAC,SAAS,IAClB,WAAW,CAAC,GAAG,CAAC,UAAC,UAAU,EAAE,KAAK;gBAChC,OAAA,oBAAC,2BAAc,IACX,GAAG,EAAG,KAAK,EACX,UAAU,EAAG,UAAU,EACvB,MAAM,EAAG,KAAK,CAAC,MAAM,EACrB,YAAY,EAAG,KAAK,CAAC,YAAY,EACjC,WAAW,EAAG,KAAK,CAAC,WAAW,GACjC;YANF,CAME,CACL,CACC,CAAA;AACd,CAAC,CAAA;AAUD;IAAkC,wCAAsC;IACpE,sBAAY,KAAwB;eAChC,kBAAM,KAAK,CAAC;IAChB,CAAC;IAED,4CAAqB,GAArB,UAAsB,SAA4B;QAC9C,qCAAqC;QACrC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,KAAK,SAAS,CAAC,QAAQ;eAE1C,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM;eAEtC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,KAAK,SAAS;mBACnC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,gBAAgB,KAAK,UAAU;mBACnD,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;IAED,6BAAM,GAAN;QACI,IAAM,eAAoC,EAAlC,sBAAQ,EAAE,wCAAwB,CAAC;QAC3C,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YACpB,KAAK,SAAS;gBACV,MAAM,CAAC,CACH;oBACI,oBAAC,6BAAa,IACV,IAAI,EAAG,QAAQ,CAAC,IAAI,EACpB,MAAM,EAAG,QAAQ,CAAC,UAAU,EAC5B,WAAW,EAAG,KAAK,CAAC,WAAW,GACjC;oBACF,oBAAC,WAAW,IACR,WAAW,EAAG,QAAQ,CAAC,WAAW,EAClC,gBAAgB,EAAG,QAAQ,CAAC,gBAAgB,EAC5C,MAAM,EAAG,KAAK,CAAC,MAAM,EACrB,YAAY,EAAG,KAAK,CAAC,YAAY,EACjC,WAAW,EAAG,KAAK,CAAC,WAAW,EAC/B,IAAI,EAAG,KAAK,CAAC,IAAI,GACnB,CACA,CACT,CAAC;YAEN,KAAK,QAAQ;gBACT,MAAM,CAAC,6BAAK,SAAS,EAAC,WAAW,GAAE,CAAC;QAC5C,CAAC;IACL,CAAC;IACL,mBAAC;AAAD,CAAC,AA1CD,CAAkC,KAAK,CAAC,SAAS,GA0ChD;AA1CY,oCAAY","sourcesContent":["import * as React from 'react';\nimport { Activity, Attachment, AttachmentLayout } from 'botframework-directlinejs';\nimport { AttachmentView } from './Attachment';\nimport { Carousel } from './Carousel';\nimport { FormattedText } from './FormattedText';\nimport { FormatState, SizeState } from './Store';\nimport { IDoCardAction } from './Chat';\n\nconst Attachments = (props: {\n    attachments: Attachment[],\n    attachmentLayout: AttachmentLayout,\n    format: FormatState,\n    size: SizeState,\n    onCardAction: IDoCardAction,\n    onImageLoad: () => void\n}) => {\n    const { attachments, attachmentLayout, ... otherProps } = props;\n    if (!attachments || attachments.length === 0)\n        return null;\n    return attachmentLayout === 'carousel' ?\n        <Carousel\n            attachments={ attachments }\n            { ... otherProps }\n        />\n    : \n        <div className=\"wc-list\">\n            { attachments.map((attachment, index) =>\n                <AttachmentView\n                    key={ index }\n                    attachment={ attachment }\n                    format={ props.format }\n                    onCardAction={ props.onCardAction }\n                    onImageLoad={ props.onImageLoad }\n                />\n            ) }\n        </div>\n}\n\nexport interface ActivityViewProps {\n    format: FormatState,\n    size: SizeState,\n    activity: Activity,\n    onCardAction: IDoCardAction,\n    onImageLoad: () => void\n}\n\nexport class ActivityView extends React.Component<ActivityViewProps, {}> {\n    constructor(props: ActivityViewProps) {\n        super(props)\n    }\n\n    shouldComponentUpdate(nextProps: ActivityViewProps) {\n        // if the activity changed, re-render\n        return this.props.activity !== nextProps.activity\n        // if the format changed, re-render\n            || this.props.format !== nextProps.format\n        // if it's a carousel and the size changed, re-render\n            || (this.props.activity.type === 'message'\n                && this.props.activity.attachmentLayout === 'carousel'\n                && this.props.size !== nextProps.size);\n    }\n\n    render() {\n        const { activity, ... props } = this.props;\n        switch (activity.type) {\n            case 'message':\n                return (\n                    <div>\n                        <FormattedText\n                            text={ activity.text }\n                            format={ activity.textFormat }\n                            onImageLoad={ props.onImageLoad }\n                        />\n                        <Attachments\n                            attachments={ activity.attachments }\n                            attachmentLayout={ activity.attachmentLayout }\n                            format={ props.format }\n                            onCardAction={ props.onCardAction }\n                            onImageLoad={ props.onImageLoad }\n                            size={ props.size }\n                        />\n                    </div>\n                );\n\n            case 'typing':\n                return <div className=\"wc-typing\"/>;\n        }\n    }\n}"]}