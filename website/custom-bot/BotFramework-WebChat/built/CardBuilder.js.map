{"version":3,"file":"CardBuilder.js","sourceRoot":"","sources":["../src/CardBuilder.tsx"],"names":[],"mappings":"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","sourcesContent":["import { Attachment, CardAction, HeroCard, Thumbnail, CardImage } from 'botframework-directlinejs';\nimport { AdaptiveCard, CardElement, Column, ColumnSet, Container, Image, OpenUrlAction, Size, SubmitAction, TextBlock, TextSize, TextWeight } from 'adaptivecards';\nimport { BotFrameworkCardAction } from './AdaptiveCardContainer';\n\nexport class AdaptiveCardBuilder {\n    private container: Container;\n    public card: AdaptiveCard;\n\n    constructor() {\n        this.card = new AdaptiveCard();\n\n        this.container = new Container();\n        this.card.addItem(this.container);\n    }\n\n    addColumnSet(sizes: number[], container?: Container) {\n        container = container || this.container;\n        const columnSet = new ColumnSet();\n        container.addItem(columnSet);\n        const columns = sizes.map(size => {\n            const column = new Column();\n            column.width = size;\n            columnSet.addColumn(column);\n            return column;\n        })\n        return columns;\n    }\n\n    addItems(cardElements: CardElement[], container?: Container) {\n        container = container || this.container;\n        cardElements.forEach(cardElement => container.addItem(cardElement));\n    }\n\n    addTextBlock(text: string, template: Partial<TextBlock>, container?: Container) {\n        container = container || this.container;\n        if (typeof text !== 'undefined') {\n            const textblock = new TextBlock();\n            for (let prop in template) {\n                (textblock as any)[prop] = (template as any)[prop];\n            }\n            textblock.text = text;\n            container.addItem(textblock);\n        }\n    }\n\n\n    addButtons(cardActions: CardAction[], includesOAuthButtons?: boolean) {\n        if (cardActions) {\n            cardActions.forEach(cardAction => {\n                this.card.addAction(AdaptiveCardBuilder.addCardAction(cardAction, includesOAuthButtons));\n            });\n        }\n    }\n\n    private static addCardAction(cardAction: CardAction, includesOAuthButtons?: boolean) {\n        if (cardAction.type === 'imBack' || cardAction.type === 'postBack') {\n            const action = new SubmitAction();\n            const botFrameworkCardAction: BotFrameworkCardAction = { __isBotFrameworkCardAction: true, ...cardAction };\n\n            action.data = botFrameworkCardAction;\n            action.title = cardAction.title;\n\n            return action;\n        } else if (cardAction.type === 'signin' && includesOAuthButtons) {\n            // Create a button specific for OAuthCard 'signin' actions (cardAction.type == signin and button action is Action.Submit)\n            const action = new SubmitAction();\n            const botFrameworkCardAction: BotFrameworkCardAction = { __isBotFrameworkCardAction: true, ...cardAction };\n\n            action.data = botFrameworkCardAction;\n            action.title = cardAction.title;\n\n            return action;\n        } else {\n            const action = new OpenUrlAction();\n            const botFrameworkCardAction: BotFrameworkCardAction = { __isBotFrameworkCardAction: true, ...cardAction };\n\n            action.title = cardAction.title;\n            action.url = cardAction.type === 'call' ? 'tel:' + cardAction.value : cardAction.value;\n\n            return action;\n        }\n    }\n\n    addCommonHeaders(content: ICommonContent) {\n        this.addTextBlock(content.title, { size: TextSize.Medium, weight: TextWeight.Bolder });\n        this.addTextBlock(content.subtitle, { isSubtle: true, wrap: true });\n        this.addTextBlock(content.text, { wrap: true });\n    }\n\n    addCommon(content: ICommonContent) {\n        this.addCommonHeaders(content);\n        this.addButtons(content.buttons);\n    }\n\n    addImage(url: string, container?: Container, selectAction?: CardAction) {\n        container = container || this.container;\n\n        const image = new Image();\n\n        image.url = url;\n        image.size = Size.Stretch;\n\n        if (selectAction) {\n            image.selectAction = AdaptiveCardBuilder.addCardAction(selectAction);\n        }\n\n        container.addItem(image);\n    }\n\n}\n\nexport interface ICommonContent {\n    title?: string,\n    subtitle?: string,\n    text?: string,\n    buttons?: CardAction[]\n}\n\nexport const buildCommonCard = (content: ICommonContent): AdaptiveCard => {\n    if (!content) return null;\n\n    const cardBuilder = new AdaptiveCardBuilder();\n    cardBuilder.addCommon(content)\n    return cardBuilder.card;\n};\n\nexport const buildOAuthCard = (content: ICommonContent): AdaptiveCard => {\n    if (!content) return null;\n\n    const cardBuilder = new AdaptiveCardBuilder();\n    cardBuilder.addCommonHeaders(content);\n    cardBuilder.addButtons(content.buttons, true);\n    return cardBuilder.card;\n};\n"]}