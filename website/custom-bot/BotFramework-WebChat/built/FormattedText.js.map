{"version":3,"file":"FormattedText.js","sourceRoot":"","sources":["../src/FormattedText.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as MarkdownIt from 'markdown-it';\nimport * as React from 'react';\n\nexport interface IFormattedTextProps {\n    text: string,\n    format: string,\n    onImageLoad: () => void\n}\n\nexport const FormattedText = (props: IFormattedTextProps) => {\n    if (!props.text || props.text === '')\n        return null;\n\n    switch (props.format) {\n        case \"xml\":\n        case \"plain\":\n            return renderPlainText(props.text);\n        default:\n            return renderMarkdown(props.text, props.onImageLoad);\n    }\n}\n\nconst renderPlainText = (text: string) => {\n    const lines = text.replace('\\r', '').split('\\n');\n    const elements = lines.map((line, i) => <span key={i}>{line}<br /></span>);\n    return <span className=\"format-plain\">{elements}</span>;\n}\n\nconst markdownIt = new MarkdownIt({ html: false, xhtmlOut: true, breaks: true, linkify: true, typographer: true });\n\n//configure MarkdownIt to open links in new tab\n//from https://github.com/markdown-it/markdown-it/blob/master/docs/architecture.md#renderer\n\n// Remember old renderer, if overriden, or proxy to default renderer\nconst defaultRender = markdownIt.renderer.rules.link_open || ((tokens, idx, options, env, self) => {\n    return self.renderToken(tokens, idx, options);\n});\n\nmarkdownIt.renderer.rules.link_open = (tokens, idx, options, env, self) => {\n    // If you are sure other plugins can't add `target` - drop check below\n    const targetIndex = tokens[idx].attrIndex('target');\n\n    if (targetIndex < 0) {\n        tokens[idx].attrPush(['target', '_blank']); // add new attribute\n    } else {\n        tokens[idx].attrs[targetIndex][1] = '_blank';    // replace value of existing attr\n    }\n\n    // pass token to default renderer.\n    return defaultRender(tokens, idx, options, env, self);\n};\n\nconst renderMarkdown = (\n    text: string,\n    onImageLoad: () => void\n) => {\n    let __html;\n\n    if (text.trim()) {\n        const src = text\n          // convert <br> tags to blank lines for markdown\n          .replace(/<br\\s*\\/?>/ig, '\\n')\n          // URL encode all links\n          .replace(/\\[(.*?)\\]\\((.*?)( +\".*?\"){0,1}\\)/ig, (match, text, url, title) => `[${text}](${markdownIt.normalizeLink(url)}${title === undefined ? '' : title})`);\n\n        const arr = src.split(/\\n *\\n|\\r\\n *\\r\\n|\\r *\\r/);\n        const ma = arr.map(a => markdownIt.render(a));\n\n        __html = ma.join('<br/>');\n    } else {\n        // Replace spaces with non-breaking space Unicode characters\n        __html = text.replace(/ */, '\\u00A0');\n    }\n\n    return <div className=\"format-markdown\" dangerouslySetInnerHTML={{ __html }} />;\n}\n"]}