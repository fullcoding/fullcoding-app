{"version":3,"file":"History.js","sourceRoot":"","sources":["../src/History.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Activity, Message, User, CardActionTypes } from 'botframework-directlinejs';\nimport { ChatState, FormatState, SizeState } from './Store';\nimport { Dispatch, connect } from 'react-redux';\nimport { ActivityView } from './ActivityView';\nimport { classList, doCardAction, IDoCardAction } from './Chat';\nimport * as konsole from './Konsole';\nimport { sendMessage } from './Store';\nimport { activityWithSuggestedActions } from './activityWithSuggestedActions';\n\nexport interface HistoryProps {\n    format: FormatState,\n    size: SizeState,\n    activities: Activity[],\n    hasActivityWithSuggestedActions: Activity,\n\n    setMeasurements: (carouselMargin: number) => void,\n    onClickRetry: (activity: Activity) => void,\n    onClickCardAction: () => void,\n\n    isFromMe: (activity: Activity) => boolean,\n    isSelected: (activity: Activity) => boolean,\n    onClickActivity: (activity: Activity) => React.MouseEventHandler<HTMLDivElement>,\n\n    onCardAction: () => void,\n    doCardAction: IDoCardAction\n}\n\nexport class HistoryView extends React.Component<HistoryProps, {}> {\n    private scrollMe: HTMLDivElement;\n    private scrollContent: HTMLDivElement;\n    private scrollToBottom = true;\n\n    private carouselActivity: WrappedActivity;\n    private largeWidth: number;\n\n    constructor(props: HistoryProps) {\n        super(props);\n    }\n\n    componentWillUpdate(nextProps: HistoryProps) {\n        let scrollToBottomDetectionTolerance = 1;\n\n        if (!this.props.hasActivityWithSuggestedActions && nextProps.hasActivityWithSuggestedActions) {\n            scrollToBottomDetectionTolerance = 40; // this should be in-sync with $actionsHeight scss var\n        }\n\n        this.scrollToBottom = (Math.abs(this.scrollMe.scrollHeight - this.scrollMe.scrollTop - this.scrollMe.offsetHeight) <= scrollToBottomDetectionTolerance);\n    }\n\n    componentDidUpdate() {\n        if (this.props.format.carouselMargin == undefined) {\n            // After our initial render we need to measure the carousel width\n\n            // Measure the message padding by subtracting the known large width\n            const paddedWidth = measurePaddedWidth(this.carouselActivity.messageDiv) - this.largeWidth;\n\n            // Subtract the padding from the offsetParent's width to get the width of the content\n            const maxContentWidth = (this.carouselActivity.messageDiv.offsetParent as HTMLElement).offsetWidth - paddedWidth;\n\n            // Subtract the content width from the chat width to get the margin.\n            // Next time we need to get the content width (on a resize) we can use this margin to get the maximum content width\n            const carouselMargin = this.props.size.width - maxContentWidth;\n\n            konsole.log('history measureMessage ' + carouselMargin);\n\n            // Finally, save it away in the Store, which will force another re-render\n            this.props.setMeasurements(carouselMargin)\n\n            this.carouselActivity = null; // After the re-render this activity doesn't exist\n        }\n\n        this.autoscroll();\n    }\n\n    private autoscroll() {\n        const vAlignBottomPadding = Math.max(0, measurePaddedHeight(this.scrollMe) - this.scrollContent.offsetHeight);\n        this.scrollContent.style.marginTop = vAlignBottomPadding + 'px';\n\n        const lastActivity = this.props.activities[this.props.activities.length - 1];\n        const lastActivityFromMe = lastActivity && this.props.isFromMe && this.props.isFromMe(lastActivity);\n\n        // Validating if we are at the bottom of the list or the last activity was triggered by the user.\n        if (this.scrollToBottom || lastActivityFromMe) {\n            this.scrollMe.scrollTop = this.scrollMe.scrollHeight - this.scrollMe.offsetHeight;\n        }\n    }\n\n    // In order to do their cool horizontal scrolling thing, Carousels need to know how wide they can be.\n    // So, at startup, we create this mock Carousel activity and measure it.\n    private measurableCarousel = () =>\n        // find the largest possible message size by forcing a width larger than the chat itself\n        <WrappedActivity\n            ref={ x => this.carouselActivity = x }\n            activity={ {\n                type: 'message',\n                id: '',\n                from: { id: '' },\n                attachmentLayout: 'carousel'\n            } }\n            format={ null }\n            fromMe={ false }\n            onClickActivity={ null }\n            onClickRetry={ null }\n            selected={ false }\n            showTimestamp={ false }\n        >\n            <div style={ { width: this.largeWidth } }>&nbsp;</div>\n        </WrappedActivity>;\n\n    // At startup we do three render passes:\n    // 1. To determine the dimensions of the chat panel (not much needs to actually render here)\n    // 2. To determine the margins of any given carousel (we just render one mock activity so that we can measure it)\n    // 3. (this is also the normal re-render case) To render without the mock activity\n\n    private doCardAction(type: CardActionTypes, value: string | object) {\n        this.props.onClickCardAction();\n        this.props.onCardAction && this.props.onCardAction();\n        return this.props.doCardAction(type, value);\n    }\n\n    render() {\n        konsole.log(\"History props\", this);\n        let content;\n        if (this.props.size.width !== undefined) {\n            if (this.props.format.carouselMargin === undefined) {\n                // For measuring carousels we need a width known to be larger than the chat itself\n                this.largeWidth = this.props.size.width * 2;\n                content = <this.measurableCarousel/>;\n            } else {\n                content = this.props.activities.map((activity, index) =>\n                    (activity.type !== 'message' || activity.text || (activity.attachments && activity.attachments.length)) &&\n                        <WrappedActivity\n                            format={ this.props.format }\n                            key={ 'message' + index }\n                            activity={ activity }\n                            showTimestamp={ index === this.props.activities.length - 1 || (index + 1 < this.props.activities.length && suitableInterval(activity, this.props.activities[index + 1])) }\n                            selected={ this.props.isSelected(activity) }\n                            fromMe={ this.props.isFromMe(activity) }\n                            onClickActivity={ this.props.onClickActivity(activity) }\n                            onClickRetry={ e => {\n                                // Since this is a click on an anchor, we need to stop it\n                                // from trying to actually follow a (nonexistant) link\n                                e.preventDefault();\n                                e.stopPropagation();\n                                this.props.onClickRetry(activity)\n                            } }\n                        >\n                            <ActivityView\n                                format={ this.props.format }\n                                size={ this.props.size }\n                                activity={ activity }\n                                onCardAction={ (type: CardActionTypes, value: string | object) => this.doCardAction(type, value) }\n                                onImageLoad={ () => this.autoscroll() }\n                            />\n                        </WrappedActivity>\n                );\n            }\n        }\n\n        const groupsClassName = classList('wc-message-groups', !this.props.format.chatTitle && 'no-header');\n\n        return (\n            <div\n                className={ groupsClassName }\n                ref={ div => this.scrollMe = div || this.scrollMe }\n                role=\"log\"\n                tabIndex={ 0 }\n            >\n                <div className=\"wc-message-group-content\" ref={ div => { if (div) this.scrollContent = div }}>\n                    { content }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport const History = connect(\n    (state: ChatState) => ({\n        // passed down to HistoryView\n        format: state.format,\n        size: state.size,\n        activities: state.history.activities,\n        hasActivityWithSuggestedActions: !!activityWithSuggestedActions(state.history.activities),\n        // only used to create helper functions below\n        connectionSelectedActivity: state.connection.selectedActivity,\n        selectedActivity: state.history.selectedActivity,\n        botConnection: state.connection.botConnection,\n        user: state.connection.user\n    }), {\n        setMeasurements: (carouselMargin: number) => ({ type: 'Set_Measurements', carouselMargin }),\n        onClickRetry: (activity: Activity) => ({ type: 'Send_Message_Retry', clientActivityId: activity.channelData.clientActivityId }),\n        onClickCardAction: () => ({ type: 'Card_Action_Clicked'}),\n        // only used to create helper functions below\n        sendMessage\n    }, (stateProps: any, dispatchProps: any, ownProps: any): HistoryProps => ({\n        // from stateProps\n        format: stateProps.format,\n        size: stateProps.size,\n        activities: stateProps.activities,\n        hasActivityWithSuggestedActions: stateProps.hasActivityWithSuggestedActions,\n        // from dispatchProps\n        setMeasurements: dispatchProps.setMeasurements,\n        onClickRetry: dispatchProps.onClickRetry,\n        onClickCardAction: dispatchProps.onClickCardAction,\n        // helper functions\n        doCardAction: doCardAction(stateProps.botConnection, stateProps.user, stateProps.format.locale, dispatchProps.sendMessage),\n        isFromMe: (activity: Activity) => activity.from.id === stateProps.user.id,\n        isSelected: (activity: Activity) => activity === stateProps.selectedActivity,\n        onClickActivity: (activity: Activity) => stateProps.connectionSelectedActivity && (() => stateProps.connectionSelectedActivity.next({ activity })),\n        onCardAction: ownProps.onCardAction\n    }), {\n        withRef: true\n    }\n)(HistoryView);\n\nconst getComputedStyleValues = (el: HTMLElement, stylePropertyNames: string[]) => {\n    const s = window.getComputedStyle(el);\n    const result: { [key: string]: number } = {};\n    stylePropertyNames.forEach(name => result[name] = parseInt(s.getPropertyValue(name)));\n    return result;\n}\n\nconst measurePaddedHeight = (el: HTMLElement): number => {\n    const paddingTop = 'padding-top', paddingBottom = 'padding-bottom';\n    const values = getComputedStyleValues(el, [paddingTop, paddingBottom]);\n    return el.offsetHeight - values[paddingTop] - values[paddingBottom];\n}\n\nconst measurePaddedWidth = (el: HTMLElement): number => {\n    const paddingLeft = 'padding-left', paddingRight = 'padding-right';\n    const values = getComputedStyleValues(el, [paddingLeft, paddingRight]);\n    return el.offsetWidth + values[paddingLeft] + values[paddingRight];\n}\n\nconst suitableInterval = (current: Activity, next: Activity) =>\n    Date.parse(next.timestamp) - Date.parse(current.timestamp) > 5 * 60 * 1000;\n\nexport interface WrappedActivityProps {\n    activity: Activity,\n    showTimestamp: boolean,\n    selected: boolean,\n    fromMe: boolean,\n    format: FormatState,\n    onClickActivity: React.MouseEventHandler<HTMLDivElement>,\n    onClickRetry: React.MouseEventHandler<HTMLAnchorElement>\n}\n\nexport class WrappedActivity extends React.Component<WrappedActivityProps, {}> {\n    public messageDiv: HTMLDivElement;\n\n    constructor(props: WrappedActivityProps) {\n        super(props);\n    }\n\n    render () {\n        let timeLine: JSX.Element;\n        switch (this.props.activity.id) {\n            case undefined:\n                timeLine = <span>{ this.props.format.strings.messageSending }</span>;\n                break;\n            case null:\n                timeLine = <span>{ this.props.format.strings.messageFailed }</span>;\n                break;\n            case \"retry\":\n                timeLine =\n                    <span>\n                        { this.props.format.strings.messageFailed }\n                        { ' ' }\n                        <a href=\".\" onClick={ this.props.onClickRetry }>{ this.props.format.strings.messageRetry }</a>\n                    </span>;\n                break;\n            default:\n                let sent: string;\n                if (this.props.showTimestamp)\n                    sent = this.props.format.strings.timeSent.replace('%1', (new Date(this.props.activity.timestamp)).toLocaleTimeString());\n                timeLine = <span>{ this.props.activity.from.name || this.props.activity.from.id }{ sent }</span>;\n                break;\n        }\n\n        const who = this.props.fromMe ? 'me' : 'bot';\n\n        const wrapperClassName = classList(\n            'wc-message-wrapper',\n            (this.props.activity as Message).attachmentLayout || 'list',\n            this.props.onClickActivity && 'clickable'\n        );\n\n        const contentClassName = classList(\n            'wc-message-content',\n            this.props.selected && 'selected'\n        );\n\n        return (\n            <div data-activity-id={ this.props.activity.id } className={ wrapperClassName } onClick={ this.props.onClickActivity }>\n                <div className={ 'wc-message wc-message-from-' + who } ref={ div => this.messageDiv = div }>\n                    <div className={ contentClassName }>\n                        <svg className=\"wc-message-callout\">\n                            <path className=\"point-left\" d=\"m0,6 l6 6 v-12 z\" />\n                            <path className=\"point-right\" d=\"m6,6 l-6 6 v-12 z\" />\n                        </svg>\n                        { this.props.children }\n                    </div>\n                </div>\n                <div className={ 'wc-message-from wc-message-from-' + who }>{ timeLine }</div>\n            </div>\n        );\n    }\n}\n"]}