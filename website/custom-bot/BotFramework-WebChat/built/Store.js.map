{"version":3,"file":"Store.js","sourceRoot":"","sources":["../src/Store.ts"],"names":[],"mappings":"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","sourcesContent":["import { Activity, ConnectionStatus, IBotConnection, Media, MediaType, Message, User } from 'botframework-directlinejs';\nimport { strings, defaultStrings, Strings } from './Strings';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Speech } from './SpeechModule';\nimport { ActivityOrID } from './Types';\nimport { HostConfig } from 'adaptivecards';\nimport * as konsole from './Konsole';\n\n// Reducers - perform state transformations\n\nimport { Reducer } from 'redux';\n\nexport enum ListeningState {\n    STOPPED,\n    STARTING,\n    STARTED,\n    STOPPING\n}\n\nexport const sendMessage = (text: string, from: User, locale: string) => ({\n    type: 'Send_Message',\n    activity: {\n        type: \"message\",\n        text,\n        from,\n        locale,\n        textFormat: 'plain',\n        timestamp: (new Date()).toISOString()\n    }} as ChatActions);\n\nexport const sendFiles = (files: FileList, from: User, locale: string) => ({\n    type: 'Send_Message',\n    activity: {\n        type: \"message\",\n        attachments: attachmentsFromFiles(files),\n        from,\n        locale\n    }} as ChatActions);\n\nconst attachmentsFromFiles = (files: FileList) => {\n    const attachments: Media[] = [];\n    for (let i = 0, numFiles = files.length; i < numFiles; i++) {\n        const file = files[i];\n        attachments.push({\n            contentType: file.type as MediaType,\n            contentUrl: window.URL.createObjectURL(file),\n            name: file.name\n        });\n    }\n    return attachments;\n}\n\nexport interface ShellState {\n    sendTyping: boolean\n    input: string\n    listeningState: ListeningState\n    lastInputViaSpeech : boolean\n}\n\nexport type ShellAction = {\n    type: 'Update_Input',\n    input: string\n    source: \"text\" | \"speech\"\n} | {\n    type: 'Listening_Starting'\n} | {\n    type: 'Listening_Start'\n} | {\n    type: 'Listening_Stopping'\n} | {\n    type: 'Listening_Stop'\n} | {\n    type: 'Stop_Speaking'\n} |  {\n    type: 'Card_Action_Clicked'\n} | {\n    type: 'Set_Send_Typing',\n    sendTyping: boolean\n} | {\n    type: 'Send_Message',\n    activity: Activity\n}| {\n    type: 'Speak_SSML',\n    ssml: string,\n    locale: string\n    autoListenAfterSpeak: boolean\n}\n\nexport const shell: Reducer<ShellState> = (\n    state: ShellState = {\n        input: '',\n        sendTyping: false,\n        listeningState: ListeningState.STOPPED,\n        lastInputViaSpeech : false\n    },\n    action: ShellAction\n) => {\n    switch (action.type) {\n        case 'Update_Input':\n            return {\n                ...state,\n                input: action.input,\n                lastInputViaSpeech : action.source == \"speech\"\n            };\n\n        case 'Listening_Start':\n            return {\n                ...state,\n                listeningState: ListeningState.STARTED\n            };\n\n        case 'Listening_Stop':\n            return {\n                ...state,\n                listeningState: ListeningState.STOPPED\n            };\n\n        case 'Listening_Starting':\n            return {\n                ...state,\n                listeningState: ListeningState.STARTING\n            };\n\n        case 'Listening_Stopping':\n            return {\n                ...state,\n                listeningState: ListeningState.STOPPING\n            };\n\n        case 'Send_Message':\n            return {\n                ...state,\n                input: ''\n            };\n\n        case 'Set_Send_Typing':\n            return {\n                ...state,\n                sendTyping: action.sendTyping\n            };\n\n        case 'Card_Action_Clicked':\n           return {\n                ...state,\n                lastInputViaSpeech : false\n           };\n\n        default:\n            return state;\n    }\n}\n\nexport interface FormatState {\n    chatTitle: boolean | string,\n    locale: string,\n    showUploadButton: boolean,\n    strings: Strings,\n    carouselMargin: number\n}\n\nexport type FormatAction = {\n    type: 'Set_Chat_Title',\n    chatTitle: boolean | string\n} | {\n    type: 'Set_Locale',\n    locale: string\n} | {\n    type: 'Set_Measurements',\n    carouselMargin: number\n} | {\n    type: 'Toggle_Upload_Button',\n    showUploadButton: boolean\n}\n\nexport const format: Reducer<FormatState> = (\n    state: FormatState = {\n        chatTitle: true,\n        locale: 'en-us',\n        showUploadButton: true,\n        strings: defaultStrings,\n        carouselMargin: undefined\n    },\n    action: FormatAction\n) => {\n    switch (action.type) {\n        case 'Set_Chat_Title':\n            return {\n                ...state,\n                chatTitle: typeof action.chatTitle === 'undefined' ? true : action.chatTitle\n            };\n        case 'Set_Locale':\n            return {\n                ...state,\n                locale: action.locale,\n                strings: strings(action.locale)\n            };\n        case 'Set_Measurements':\n            return {\n                ...state,\n                carouselMargin: action.carouselMargin\n            };\n        case 'Toggle_Upload_Button':\n            return {\n                ...state,\n                showUploadButton: action.showUploadButton\n            };\n        default:\n            return state;\n    }\n}\n\nexport interface SizeState {\n    height: number,\n    width: number,\n}\n\nexport type SizeAction = {\n    type: 'Set_Size',\n    width: number,\n    height: number\n}\n\nexport const size: Reducer<SizeState> = (\n    state: SizeState = {\n        width: undefined,\n        height: undefined\n    },\n    action: SizeAction\n) => {\n    switch (action.type) {\n        case 'Set_Size':\n            return {\n                ... state,\n                width: action.width,\n                height: action.height\n            };\n        default:\n            return state;\n    }\n}\n\n\nexport interface ConnectionState {\n    connectionStatus: ConnectionStatus,\n    botConnection: IBotConnection,\n    selectedActivity: BehaviorSubject<ActivityOrID>,\n    user: User,\n    bot: User\n}\n\nexport type ConnectionAction = {\n    type: 'Start_Connection',\n    botConnection: IBotConnection,\n    user: User,\n    bot: User,\n    selectedActivity: BehaviorSubject<ActivityOrID>\n} | {\n    type: 'Connection_Change',\n    connectionStatus: ConnectionStatus\n}\n\nexport const connection: Reducer<ConnectionState> = (\n    state: ConnectionState = {\n        connectionStatus: ConnectionStatus.Uninitialized,\n        botConnection: undefined,\n        selectedActivity: undefined,\n        user: undefined,\n        bot: undefined\n    },\n    action: ConnectionAction\n) => {\n    switch (action.type) {\n        case 'Start_Connection':\n            return {\n                ... state,\n                botConnection: action.botConnection,\n                user: action.user,\n                bot: action.bot,\n                selectedActivity: action.selectedActivity\n            };\n        case 'Connection_Change':\n            return {\n                ... state,\n                connectionStatus: action.connectionStatus\n            };\n        default:\n            return state;\n    }\n}\n\nexport interface HistoryState {\n    activities: Activity[],\n    clientActivityBase: string,\n    clientActivityCounter: number,\n    selectedActivity: Activity\n}\n\nexport type HistoryAction = {\n    type: 'Receive_Message' | 'Send_Message' | 'Show_Typing' | 'Receive_Sent_Message'\n    activity: Activity\n} | {\n    type: 'Send_Message_Try' | 'Send_Message_Fail' | 'Send_Message_Retry',\n    clientActivityId: string\n} | {\n    type: 'Send_Message_Succeed'\n    clientActivityId: string\n    id: string\n} | {\n    type: 'Select_Activity',\n    selectedActivity: Activity\n} | {\n    type: 'Take_SuggestedAction',\n    message: Message\n} | {\n    type: 'Clear_Typing',\n    id: string\n}\n\nconst copyArrayWithUpdatedItem = <T>(array: Array<T>, i: number, item: T) => [\n    ... array.slice(0, i),\n    item,\n    ... array.slice(i + 1)\n];\n\nexport const history: Reducer<HistoryState> = (\n    state: HistoryState = {\n        activities: [],\n        clientActivityBase: Date.now().toString() + Math.random().toString().substr(1) + '.',\n        clientActivityCounter: 0,\n        selectedActivity: null\n    },\n    action: HistoryAction\n) => {\n    konsole.log(\"history action\", action);\n    switch (action.type) {\n        case 'Receive_Sent_Message': {\n            if (!action.activity.channelData || !action.activity.channelData.clientActivityId) {\n                // only postBack messages don't have clientActivityId, and these shouldn't be added to the history\n                return state;\n            }\n            const i = state.activities.findIndex(activity =>\n                activity.channelData && activity.channelData.clientActivityId === action.activity.channelData.clientActivityId\n            );\n            if (i !== -1) {\n                const activity = state.activities[i];\n                return {\n                    ... state,\n                    activities: copyArrayWithUpdatedItem(state.activities, i, activity),\n                    selectedActivity: state.selectedActivity === activity ? action.activity : state.selectedActivity\n                };\n            }\n            // else fall through and treat this as a new message\n        }\n        case 'Receive_Message':\n            if (state.activities.find(a => a.id === action.activity.id)) return state; // don't allow duplicate messages\n\n            return {\n                ... state,\n                activities: [\n                    ... state.activities.filter(activity => activity.type !== \"typing\"),\n                    action.activity,\n                    ... state.activities.filter(activity => activity.from.id !== action.activity.from.id && activity.type === \"typing\"),\n                ]\n            };\n\n        case 'Send_Message':\n            return {\n                ... state,\n                activities: [\n                    ... state.activities.filter(activity => activity.type !== \"typing\"),\n                    {\n                        ... action.activity,\n                        timestamp: (new Date()).toISOString(),\n                        channelData: { clientActivityId: state.clientActivityBase + state.clientActivityCounter }\n                    },\n                    ... state.activities.filter(activity => activity.type === \"typing\"),\n                ],\n                clientActivityCounter: state.clientActivityCounter + 1\n            };\n\n        case 'Send_Message_Retry': {\n            const activity = state.activities.find(activity =>\n                activity.channelData && activity.channelData.clientActivityId === action.clientActivityId\n            );\n            const newActivity = activity.id === undefined ? activity : { ... activity, id: undefined };\n            return {\n                ... state,\n                activities: [\n                    ... state.activities.filter(activityT => activityT.type !== \"typing\" && activityT !== activity),\n                    newActivity,\n                    ... state.activities.filter(activity => activity.type === \"typing\")\n                ],\n                selectedActivity: state.selectedActivity === activity ? newActivity : state.selectedActivity\n            };\n        }\n        case 'Send_Message_Succeed':\n        case 'Send_Message_Fail': {\n            const i = state.activities.findIndex(activity =>\n                activity.channelData && activity.channelData.clientActivityId === action.clientActivityId\n            );\n            if (i === -1) return state;\n\n            const activity = state.activities[i];\n            if (activity.id && activity.id != \"retry\") return state;\n\n            const newActivity = {\n                ... activity,\n                id: action.type === 'Send_Message_Succeed' ? action.id : null\n            };\n            return {\n                ... state,\n                activities: copyArrayWithUpdatedItem(state.activities, i, newActivity),\n                clientActivityCounter: state.clientActivityCounter + 1,\n                selectedActivity: state.selectedActivity === activity ? newActivity : state.selectedActivity\n            };\n        }\n        case 'Show_Typing':\n            return {\n                ... state,\n                activities: [\n                    ... state.activities.filter(activity => activity.type !== \"typing\"),\n                    ... state.activities.filter(activity => activity.from.id !== action.activity.from.id && activity.type === \"typing\"),\n                    action.activity\n                ]\n            };\n\n        case 'Clear_Typing':\n            return {\n                ... state,\n                activities: state.activities.filter(activity => activity.id !== action.id),\n                selectedActivity: state.selectedActivity && state.selectedActivity.id === action.id ? null : state.selectedActivity\n            };\n\n        case 'Select_Activity':\n            if (action.selectedActivity === state.selectedActivity) return state;\n            return {\n                ... state,\n                selectedActivity: action.selectedActivity\n            };\n\n        case 'Take_SuggestedAction':\n            const i = state.activities.findIndex(activity => activity === action.message);\n            const activity = state.activities[i];\n            const newActivity = {\n                ... activity,\n                suggestedActions: undefined\n            };\n            return {\n                ... state,\n                activities: copyArrayWithUpdatedItem(state.activities, i, newActivity),\n                selectedActivity: state.selectedActivity === activity ? newActivity : state.selectedActivity\n            }\n\n        default:\n            return state;\n    }\n}\n\nexport interface AdaptiveCardsState {\n    hostConfig: HostConfig\n}\n\nexport type AdaptiveCardsAction = {\n    type: 'Set_AdaptiveCardsHostConfig',\n    payload: any\n}\n\nexport const adaptiveCards: Reducer<AdaptiveCardsState> = (\n    state: AdaptiveCardsState = {\n        hostConfig: null\n    },\n    action: AdaptiveCardsAction\n) => {\n    switch (action.type) {\n        case 'Set_AdaptiveCardsHostConfig':\n            return {\n                ...state,\n                hostConfig: action.payload && (action.payload instanceof HostConfig ? action.payload : new HostConfig(action.payload))\n            };\n\n        default:\n            return state;\n    }\n}\n\n\nexport type ChatActions = ShellAction | FormatAction | SizeAction | ConnectionAction | HistoryAction | AdaptiveCardsAction;\n\nconst nullAction = { type: null } as ChatActions;\n\nexport interface ChatState {\n    adaptiveCards: AdaptiveCardsState,\n    connection: ConnectionState,\n    format: FormatState,\n    history: HistoryState,\n    shell: ShellState,\n    size: SizeState\n}\n\nconst speakFromMsg = (msg: Message, fallbackLocale: string) => {\n    let speak = msg.speak;\n\n    if (!speak && msg.textFormat == null || msg.textFormat == \"plain\")\n        speak = msg.text;\n    if (!speak && msg.channelData && msg.channelData.speechOutput && msg.channelData.speechOutput.speakText)\n        speak = msg.channelData.speechOutput.speakText;\n    if (!speak && msg.attachments && msg.attachments.length > 0)\n        for (let i = 0; i < msg.attachments.length; i++) {\n            var anymsg = <any>msg;\n            if (anymsg.attachments[i][\"content\"] && anymsg.attachments[i][\"content\"][\"speak\"]) {\n                speak = anymsg.attachments[i][\"content\"][\"speak\"];\n                break;\n            }\n        }\n\n    return {\n            type : 'Speak_SSML',\n            ssml: speak,\n            locale: msg.locale || fallbackLocale,\n            autoListenAfterSpeak : (msg.inputHint == \"expectingInput\") || (msg.channelData && msg.channelData.botState == \"WaitingForAnswerToQuestion\"),\n    }\n}\n\n// Epics - chain actions together with async operations\n\nimport { applyMiddleware } from 'redux';\nimport { Epic } from 'redux-observable';\nimport { Observable } from 'rxjs/Observable';\n\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/delay';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/merge';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/throttleTime';\nimport 'rxjs/add/operator/takeUntil';\n\nimport 'rxjs/add/observable/bindCallback';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/observable/of';\n\n\nconst sendMessageEpic: Epic<ChatActions, ChatState> = (action$, store) =>\n    action$.ofType('Send_Message')\n    .map(action => {\n        const state = store.getState();\n        const clientActivityId = state.history.clientActivityBase + (state.history.clientActivityCounter - 1);\n        return ({ type: 'Send_Message_Try', clientActivityId } as HistoryAction);\n    });\n\nconst trySendMessageEpic: Epic<ChatActions, ChatState> = (action$, store) =>\n    action$.ofType('Send_Message_Try')\n    .flatMap(action => {\n        const state = store.getState();\n        const clientActivityId = action.clientActivityId;\n        const activity = state.history.activities.find(activity => activity.channelData && activity.channelData.clientActivityId === clientActivityId);\n        if (!activity) {\n            konsole.log(\"trySendMessage: activity not found\");\n            return Observable.empty<HistoryAction>();\n        }\n\n        if (state.history.clientActivityCounter == 1) {\n            var capabilities = {\n                type : 'ClientCapabilities',\n                requiresBotState: true,\n                supportsTts: true,\n                supportsListening: true,\n                // Todo: consider implementing acknowledgesTts: true\n            };\n            (<any>activity).entities  =(<any>activity).entities == null ? [capabilities] :  [...(<any>activity).entities, capabilities];\n        }\n\n        return state.connection.botConnection.postActivity(activity)\n        .map(id => ({ type: 'Send_Message_Succeed', clientActivityId, id } as HistoryAction))\n        .catch(error => Observable.of({ type: 'Send_Message_Fail', clientActivityId } as HistoryAction))\n    });\n\nconst speakObservable = Observable.bindCallback<string, string, {}, {}>(Speech.SpeechSynthesizer.speak);\n\nconst speakSSMLEpic: Epic<ChatActions, ChatState> = (action$, store) =>\n    action$.ofType('Speak_SSML')\n    .filter(action => action.ssml )\n    .mergeMap(action => {\n\n        var onSpeakingStarted =  null;\n        var onSpeakingFinished = () => nullAction;\n        if(action.autoListenAfterSpeak) {\n            onSpeakingStarted = () => Speech.SpeechRecognizer.warmup() ;\n            onSpeakingFinished = () => ({ type: 'Listening_Starting' } as ShellAction);\n        }\n\n        const call$ = speakObservable(action.ssml, action.locale, onSpeakingStarted);\n        return call$.map(onSpeakingFinished)\n            .catch(error => Observable.of(nullAction));\n    })\n    .merge(action$.ofType('Speak_SSML').map(_ => ({ type: 'Listening_Stopping' } as ShellAction)));\n\nconst speakOnMessageReceivedEpic: Epic<ChatActions, ChatState> = (action$, store) =>\n    action$.ofType('Receive_Message')\n    .filter(action => (action.activity as Message) && store.getState().shell.lastInputViaSpeech)\n    .map(action => speakFromMsg(action.activity as Message, store.getState().format.locale) as ShellAction);\n\nconst stopSpeakingEpic: Epic<ChatActions, ChatState> = (action$) =>\n    action$.ofType(\n        'Update_Input',\n        'Listening_Starting',\n        'Send_Message',\n        'Card_Action_Clicked',\n        'Stop_Speaking'\n    )\n    .do(Speech.SpeechSynthesizer.stopSpeaking)\n    .map(_ => nullAction)\n\nconst stopListeningEpic: Epic<ChatActions, ChatState> = (action$, store) =>\n    action$.ofType(\n        'Listening_Stopping',\n        'Card_Action_Clicked'\n    )\n    .do(async () => {\n        await Speech.SpeechRecognizer.stopRecognizing()\n\n        store.dispatch({ type: 'Listening_Stop' });\n    })\n    .map(_ => nullAction);\n\nconst startListeningEpic: Epic<ChatActions, ChatState> = (action$, store) =>\n    action$.ofType('Listening_Starting')\n    .do(async (action : ShellAction) => {\n        const { history: { activities }, format: { locale } } = store.getState();\n        const lastMessageActivity = [...activities].reverse().find(activity => activity.type === 'message');\n        // TODO: Bump DirectLineJS version to support \"listenFor\" grammars\n        const grammars: string[] = lastMessageActivity && (lastMessageActivity as any).listenFor;\n        const onIntermediateResult = (srText : string) => { store.dispatch({ type: 'Update_Input', input: srText, source: 'speech' })};\n        const onFinalResult = (srText : string) => {\n            srText = srText.replace(/^[.\\s]+|[.\\s]+$/g, \"\");\n            onIntermediateResult(srText);\n            store.dispatch({ type: 'Listening_Stopping' });\n            store.dispatch(sendMessage(srText, store.getState().connection.user, locale));\n        };\n        const onAudioStreamStart = () => { store.dispatch({ type: 'Listening_Start' }) };\n        const onRecognitionFailed = () => { store.dispatch({ type: 'Listening_Stopping' })};\n\n        await Speech.SpeechRecognizer.startRecognizing(\n            locale,\n            grammars,\n            onIntermediateResult,\n            onFinalResult,\n            onAudioStreamStart,\n            onRecognitionFailed\n        );\n    })\n    .map(_ => nullAction)\n\nconst listeningSilenceTimeoutEpic: Epic<ChatActions, ChatState> = (action$, store) =>\n{\n    const cancelMessages$ = action$.ofType('Update_Input', 'Listening_Stopping');\n    return action$.ofType('Listening_Start')\n        .mergeMap((action) =>\n            Observable.of(({ type: 'Listening_Stopping' }) as ShellAction)\n            .delay(5000)\n            .takeUntil(cancelMessages$));\n};\n\nconst retrySendMessageEpic: Epic<ChatActions, ChatState> = (action$) =>\n    action$.ofType('Send_Message_Retry')\n    .map(action => ({ type: 'Send_Message_Try', clientActivityId: action.clientActivityId } as HistoryAction));\n\nconst updateSelectedActivityEpic: Epic<ChatActions, ChatState> = (action$, store) =>\n    action$.ofType(\n        'Send_Message_Succeed',\n        'Send_Message_Fail',\n        'Show_Typing',\n        'Clear_Typing'\n    )\n    .map(action => {\n        const state = store.getState();\n        if (state.connection.selectedActivity)\n            state.connection.selectedActivity.next({ activity: state.history.selectedActivity });\n        return nullAction;\n    });\n\nconst showTypingEpic: Epic<ChatActions, ChatState> = (action$) =>\n    action$.ofType('Show_Typing')\n    .delay(3000)\n    .map(action => ({ type: 'Clear_Typing', id: action.activity.id } as HistoryAction));\n\nconst sendTypingEpic: Epic<ChatActions, ChatState> = (action$, store) =>\n    action$.ofType('Update_Input')\n    .map(_ => store.getState())\n    .filter(state => state.shell.sendTyping)\n    .throttleTime(3000)\n    .do(_ => konsole.log(\"sending typing\"))\n    .flatMap(state =>\n        state.connection.botConnection.postActivity({\n            type: 'typing',\n            from: state.connection.user\n        })\n        .map(_ => nullAction)\n        .catch(error => Observable.of(nullAction))\n    );\n\n// Now we put it all together into a store with middleware\n\nimport { Store, createStore as reduxCreateStore, combineReducers } from 'redux';\nimport { combineEpics, createEpicMiddleware } from 'redux-observable';\n\nexport const createStore = () =>\n    reduxCreateStore(\n        combineReducers<ChatState>({\n            adaptiveCards,\n            connection,\n            format,\n            history,\n            shell,\n            size\n        }),\n        applyMiddleware(createEpicMiddleware(combineEpics(\n            updateSelectedActivityEpic,\n            sendMessageEpic,\n            trySendMessageEpic,\n            retrySendMessageEpic,\n            showTypingEpic,\n            sendTypingEpic,\n            speakSSMLEpic,\n            speakOnMessageReceivedEpic,\n            startListeningEpic,\n            stopListeningEpic,\n            stopSpeakingEpic,\n            listeningSilenceTimeoutEpic\n        )))\n    );\n\nexport type ChatStore = Store<ChatState>;\n"]}