'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.types = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _bindInterface = require('./bind-interface');

var _bindInterface2 = _interopRequireDefault(_bindInterface);

var _stringify2 = require('./stringify');

var _stringify3 = _interopRequireDefault(_stringify2);

var _types = require('./types');

var type = _interopRequireWildcard(_types);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaults = {
	version: 'V1.0',
	lang: 'en',
	encoding: 'utf-8'
};

var types = exports.types = type;

exports.default = function (name) {
	var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	if (!name) {
		throw new TypeError('expects name.');
	}

	var header = _extends({}, defaults, opts);

	var _rules = [];

	var rule = function rule(name) {
		var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '<NULL>';
		var info = arguments[2];
		return _rules.push([name, token, info]);
	};
	var publicRule = function publicRule(name, token, info) {
		return rule(name, token, _extends({}, info, {
			public: true
		}));
	};

	var interfaces = {
		rule: { type: type.RULE },
		word: { type: type.WORD },
		alt: { type: type.ALTERNATIVE }
	};

	var api = (0, _bindInterface2.default)(rule, interfaces);
	var publicApi = (0, _bindInterface2.default)(publicRule, interfaces);

	return _extends({}, api, {
		public: _extends({}, publicApi),
		rules: function rules() {
			return _rules.concat();
		},
		stringify: function stringify() {
			return (0, _stringify3.default)(header, name, _rules);
		}
	});
};