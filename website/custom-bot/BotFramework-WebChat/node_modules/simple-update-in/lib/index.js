'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = setIn;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function setIn(obj, path, updater) {
  if (!Array.isArray(path)) {
    throw new Error('path must be an array');
  }

  if (!path.length) {
    return updater(obj);
  }

  path = path.slice();

  var accessor = path.shift();
  var value = typeof obj !== 'undefined' && obj[accessor];
  var nextObj = obj;

  if (typeof accessor === 'string' && ((typeof nextObj === 'undefined' ? 'undefined' : _typeof(nextObj)) !== 'object' || Array.isArray(nextObj))) {
    nextObj = {};
  } else if (typeof accessor === 'number' && !Array.isArray(nextObj)) {
    nextObj = [];
  }

  if (typeof accessor === 'number') {
    if (updater || path.length) {
      if (accessor === -1) {
        return [].concat(_toConsumableArray(nextObj), [setIn([], path, updater)]);
      }

      var nextValue = setIn(value, path, updater);

      if (typeof nextValue !== 'undefined') {
        if (nextValue === value) {
          return obj;
        } else {
          nextObj = [].concat(_toConsumableArray(nextObj));
          nextObj[accessor] = nextValue;

          return nextObj;
        }
      }
    }

    // If updater returned undefined or no updater at all, delete the item
    if (accessor in nextObj) {
      nextObj = [].concat(_toConsumableArray(nextObj));
      nextObj.splice(accessor, 1);
    }

    return nextObj;
  } else {
    if (updater || path.length) {
      var _nextValue = setIn(value, path, updater);

      if (typeof _nextValue !== 'undefined') {
        if (_nextValue === value) {
          return obj;
        } else {
          return _extends({}, nextObj, _defineProperty({}, accessor, _nextValue));
        }
      }
    }

    // If updater returned undefined or no updater at all, delete the key
    if (accessor in nextObj) {
      nextObj = _extends({}, nextObj);
      delete nextObj[accessor];
    }

    return nextObj;
  }
}